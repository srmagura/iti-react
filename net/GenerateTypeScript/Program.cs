using Dto;
using ITI.TypeScriptDtoGenerator;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;

namespace GenerateTypeScript
{
    // Automatically runs post build
    class Program
    {
        private static readonly string RootDir = Directory.GetParent(AppDomain.CurrentDomain.BaseDirectory)
            .Parent
            .Parent
            .Parent.Parent.FullName;
        private static readonly string TestWebsiteSrcDir = Path.Combine(RootDir, "test-website/src");
        private static readonly string ModelsGeneratedDir = Path.Combine(TestWebsiteSrcDir, "Models/Generated");

        private static readonly string AutoGeneratedMessage = "// Auto-generated by GenerateTypeScript";

        private static void GenerateModels()
        {
            var outputPath = ModelsGeneratedDir;

            if (!Directory.Exists(outputPath))
                Directory.CreateDirectory(outputPath);

            var enums = new List<Type>
            {
                typeof(ErrorDtoType)
            };

            var dtos = new List<Type>
            {
                typeof(EmailAddressDto),
                typeof(ErrorDto),
                typeof(PermissionDto),
                typeof(ProductDto),
                typeof(ProductListDto),
                typeof(UserDto),
                typeof(UserLogInDto)
            };

            foreach (var @enum in enums)
            {
                TypeScriptDtoGenerator.GenerateEnum(@enum, outputPath);
            }
            Console.WriteLine("Generated TypeScript enums.");

            TypeScriptDtoGenerator.GenerateDtos(dtos, enums, "", outputPath);
            Console.WriteLine("Generated TypeScript DTOs.");
        }

        private static void AutoIndex(string dirPath)
        {
            var output = new StringBuilder();
            output.AppendLine(AutoGeneratedMessage);

            foreach (var path in Directory.EnumerateFiles(dirPath, "*.ts"))
            {
                if (path.Contains("index.ts")) continue;

                var noExtension = Path.GetFileNameWithoutExtension(path);
                output.AppendLine($"export * from './{noExtension}'");
            }

            var outputPath = Path.Combine(dirPath, "index.ts");
            File.WriteAllText(outputPath, output.ToString());
            PrintWrittenMessage(outputPath);
        }

        private static void PrintWrittenMessage(string path)
        {
            Console.WriteLine($"Wrote file {Path.GetFileName(path)}");
        }

        public static void Main()
        {
            try
            {
                GenerateModels();
                AutoIndex(ModelsGeneratedDir);
            }
            catch (Exception e)
            {
                Console.WriteLine("GenerateTypeScript failed with error: " + e.Message);
            }
        }
    }
}
