@using System.Configuration
@using System.Diagnostics
@using System.Xml.Linq
@using Microsoft.AspNetCore.Hosting
@using Website.Views.Shared
@using Microsoft.AspNetCore.Html
@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.NodeServices
@using Microsoft.AspNetCore.Razor.TagHelpers
@using Microsoft.AspNetCore.SpaServices;
@using Microsoft.AspNetCore.SpaServices.Prerendering
@using Newtonsoft.Json;
@using Microsoft.Extensions.Configuration;
@using Microsoft.Extensions.Options
@using Website
@model Website.ViewModels.Base.RazorViewModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@inject IOptions<AppSettings> AppSettings

@{
    var reactViewModelJson = JsonConvert.SerializeObject(Model.ReactViewModel);
    var resourcePaths = ResourceHelpers.GetResourcePaths();

    // Copied from PrerenderTagHelper source
    async Task<string> GetComponentHtml()
    {
        var serviceProvider = Model.ServiceProvider;

        var hostEnv = (IHostingEnvironment)serviceProvider.GetService(typeof(IHostingEnvironment));
        var nodeServices = (INodeServices)serviceProvider.GetService(typeof(INodeServices));
        var applicationBasePath = hostEnv.ContentRootPath;

        var applicationLifetime = (IApplicationLifetime)serviceProvider.GetService(typeof(IApplicationLifetime));
        var applicationStoppingToken = applicationLifetime.ApplicationStopping;

        var requestFeature = ViewContext.HttpContext.Features.Get<IHttpRequestFeature>();
        var unencodedPathAndQuery = requestFeature.RawTarget;

        var renderResult = await Prerenderer.RenderToString(
            applicationBasePath,
            nodeServices,
            applicationStoppingToken,
            new JavaScriptModuleExport("wwwroot/dist/server"),
            Model.ReactViewModel.BaseUrl,
            unencodedPathAndQuery,
            reactViewModelJson,
            0,
            ViewContext.HttpContext.Request.PathBase.ToString());

        return renderResult.Html;
    }

    string ExtractTitle(string _componentHtml)
    {
        // Second div tag has an attribute data-title containing the title for the page
        var firstDiv = _componentHtml.Substring(0, _componentHtml.IndexOf('>') + 1);
        var divWithClosing = firstDiv + "</div>"; // Get just the tag we want so we don't have to parse everything
        var xelement = XElement.Parse(divWithClosing);
        var titleAttribute = xelement.Attributes().FirstOrDefault(a => a.Name.ToString().Equals("data-title", StringComparison.OrdinalIgnoreCase));

        if (titleAttribute == null)
        {
            throw new Exception("Could not find data-title attribute. Check that all components in your page are within the <Layout>.");
        }

        return titleAttribute.Value;
    }

    var serverSideRender = !AppSettings.Value.DisableServerSideRendering;
    var siteName = "React Template";

    string componentHtml;
    string title;

    if (serverSideRender)
    {
        componentHtml = await GetComponentHtml();
        var titlePart = ExtractTitle(componentHtml);
        title = !string.IsNullOrWhiteSpace(titlePart)
            ? $"{titlePart} - {siteName}"
            : siteName;
    }
    else
    {
        componentHtml = null;
        title = $"{siteName} - enable SSR to see full title";
    }
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <title>@title</title>

    @foreach (var cssPath in resourcePaths.Css)
    {
        <link rel="stylesheet" href="@Url.Content(cssPath)" />
    }

</head>
<body>
    @Html.AntiForgeryToken()

    <div class="d-none" id="react-view-model">
        @Html.Raw(reactViewModelJson)
    </div>

    @if (serverSideRender)
    {
        <!-- React will give a warning if there is any extra whitespace around the HTML -->
        <div id="react-app">@Html.Raw(componentHtml)</div>
    }
    else
    {
        <div id="react-app"></div>
    }

    @foreach (var scriptPath in resourcePaths.Js)
    {
        <script src="@(Url.Content(scriptPath))"></script>
    }
</body>
</html>